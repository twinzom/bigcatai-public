import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

import com.google.gson.Gson;

import redis.clients.jedis.JedisPooled;
import redis.clients.jedis.search.Document;
import redis.clients.jedis.search.IndexOptions;
import redis.clients.jedis.search.Query;
import redis.clients.jedis.search.Schema;

public class RedisSearch {
    
    public static void main(String[] args) throws IOException {
        
        String index = "default-index";
        
        JedisPooled client = new JedisPooled("localhost", 6379);
        
        client.ftDropIndex("default-index");

        Map<String, Object> attr = new HashMap<>();
        attr.put("TYPE", "FLOAT64");
        attr.put("DIM", 1024);
        attr.put("DISTANCE_METRIC", "COSINE");

        Schema sc = new Schema().addHNSWVectorField("v", attr);
        client.ftCreate(index, IndexOptions.defaultOptions(), sc);

        Gson gson = new Gson();
        Double[] v1= generateRandomDoubleArray(1024);
        Double[] v2= generateRandomDoubleArray(1024);
        Double[] v3= generateRandomDoubleArray(1024);
        
        System.out.println(gson.toJson(v1));
        System.out.println(gson.toJson(v2));
        System.out.println(gson.toJson(v3));
        
        client.hset("a".getBytes(), "v".getBytes(), doubleArrayToBytesLittleEndianOrder(v1));
        client.hset("b".getBytes(), "v".getBytes(), doubleArrayToBytesLittleEndianOrder(v2));
        client.hset("c".getBytes(), "v".getBytes(), doubleArrayToBytesLittleEndianOrder(v3));

        //Float[] v = new Float[] {0.5290266f,0.06998223f,0.026482046f,0.13522828,0.74259144,0.05428046,0.27061623,0.88802135,0.60222876,0.82770187,0.43596315,0.26146686,0.06048453,0.7518882,0.19407225,0.2820633,0.8064769,0.6603265,0.21227026,0.64948803,0.23172468,0.9170292,0.616739,0.81310654,0.10840702,0.11680585,0.051127493,0.48184317,0.0864988,0.037484348,0.5106345,0.6752954,0.03586608,0.8490381,0.96082836,0.022578776,0.43520254,0.8698571,0.25833762,0.29228097,0.46216345,0.07171917,0.73025143,0.8039896,0.26682925,0.32335407,0.7970768,0.28168404,0.5404738,0.04444039,0.5499639,0.10500568,0.92839706,0.54966813,0.22933847,0.67983645,0.91232336,0.19398582,0.064887166,0.55913574,0.41569346,0.29880702,0.09497094,0.91364634,0.8033481,0.3238787,0.009066939,0.28555095,0.9730001,0.44544077,0.07495791,0.202725,0.51502377,0.46858382,0.10141134,0.023809314,0.1730926,0.21631426,0.62847614,0.3024485,0.12282002,0.34136796,0.0658313,0.37088305,0.5286936,0.05650103,0.95255286,0.75741976,0.89924437,0.99767715,0.4800372,0.36856747,0.4726894,0.26074886,0.69757867,0.124833405,0.094495535,0.28998816,0.6543158,0.3700118,0.23680454,0.46589494,0.072131276,0.9485357,0.22795534,0.925444,0.8949331,0.32602775,0.7570603,0.8513052,0.32700688,0.61711144,0.97050565,0.454185,0.31637734,0.37499624,0.23922592,0.4265182,0.12105489,0.62311715,0.030664861,0.31413847,0.83247805,0.8946042,0.42860568,0.09875214,0.94035405,0.15562123,0.19679594,0.13713115,0.07850671,0.97931105,0.9458853,0.30765748,0.56746507,0.40449816,0.83314633,0.881541,0.79468536,0.6443554,0.27439702,0.89067733,0.57894,0.4324659,0.679237,0.99830526,0.6360985,0.92527795,0.114041805,0.49960136,0.98696285,0.97964156,0.7601272,0.7599546,0.46482652,0.44135106,0.853244,0.32737833,0.43494266,0.105431795,0.57933694,0.08644396,0.9271862,0.92196816,0.8526931,0.12397611,0.8070748,0.14386326,0.53672034,0.68690217,0.522286,0.656962,0.08326191,0.4810571,0.7183309,0.05099517,0.690337,0.103024304,0.4276743,0.82498246,0.41537344,0.14746237,0.114035785,0.85684866,0.56437963,0.2876824,0.06367761,0.17848164,0.51822025,0.7009736,0.12713015,0.5993239,0.6944721,0.68143165,0.7500977,0.61951494,0.894624,0.24655038,0.41641992,0.8138661,0.9971603,0.35993952,0.83725524,0.7874837,0.050955355,0.9372155,0.4405511,0.38018012,0.8521768,0.71697015,0.37794048,0.8981066,0.18141705,0.020987988,0.5101507,0.28608435,0.9940662,0.32040304,0.74764764,0.7223231,0.032126367,0.8057398,0.004514396,0.65862936,0.92401856,0.032871664,0.61754507,0.7744951,0.8028147,0.40357965,0.8394218,0.2339012,0.573264,0.22395504,0.33794922,0.49118656,0.042596996,0.36734247,0.12910062,0.28946388,0.37613934,0.9174597,0.09964293,0.42496723,0.5011438,0.36399126,0.9980603,0.94718736,0.74394745,0.015179694,0.20619869,0.25209785,0.80772424,0.84321284,0.6674587,0.66924495,0.16998613,0.3176239,0.4125377,0.6986197,0.6679687,0.25421762,0.26586205,0.71635395,0.8416306,0.9225521,0.5632751,0.32628602,0.99183476,0.7397282,0.29570228,0.31487167,0.68711346,0.72376215,0.6989732,0.48793507,0.9961416,0.39336902,0.32443255,0.28814888,0.24265301,0.15542257,0.3892445,0.6613208,0.8611706,0.10514629,0.26332664,0.9475812,0.5898368,0.03134632,0.298716,0.8010789,0.96321404,0.7394327,0.5470626,0.11008799,0.88367814,0.3139528,0.8951873,0.31042266,0.05358553,0.8908499,0.6336768,0.21128792,0.66851974,0.91426754,0.76888514,0.72732425,0.009488463,0.7456656,0.50717115,0.61742836,0.26196462,0.17215937,0.24753737,0.24435365,0.94327295,0.6398019,0.2839979,0.40416688,0.9762761,0.4951176,0.8640592,0.73701,0.52399254,0.749275,0.59984666,0.06658894,0.8421933,0.74422216,0.7619654,0.062294483,0.3388068,0.97486544,0.18459946,0.8523886,0.8018671,0.34756267,0.3081928,0.0074387193,0.0016571879,0.4900427,0.92101717,0.66892534,0.04563093,0.7942124,0.023836255,0.4181152,0.502777,0.60964614,0.7266651,0.8049103,0.28157604,0.115965605,0.44037342,0.71612155,0.9849794,0.6065494,0.7987816,0.028764665,0.24741095,0.1993981,0.6422727,0.22844493,0.7312997,0.8545129,0.118237674,0.97823095,0.7008412,0.28741276,0.06644952,0.49277455,0.653451,0.20765555,0.62143236,0.13960743,0.45771372,0.82728183,0.59485626,0.97894734,0.9816853,0.84045273,0.11791259,0.13001609,0.78642833,0.9013022,0.09856182,0.47147423,0.17403507,0.8668948,0.856702,0.4424014,0.6126264,0.83652794,0.36999643,0.6952078,0.28654313,0.9334166,0.62576985,0.2904982,0.5399237,0.23164904,0.8146084,0.63437843,0.17597067,0.63743573,0.40676332,0.69979507,0.6504647,0.5619351,0.36399955,0.39463836,0.942607,0.061812043,0.9010758,0.5305592,0.41332966,0.7272643,0.8196754,0.3884173,0.9631877,0.93526983,0.6935154,0.69027627,0.7993375,0.39361072,0.23986894,0.0858078,0.71255934,0.92979914,0.42628616,0.39540154,0.8775429,0.74496347,0.04146397,0.56636286,0.3276127,0.38827956,0.11868703,0.97610205,0.7517344,0.31050283,0.20486695,0.63160133,0.52813905,0.33904606,0.6868821,0.3827141,0.6844979,0.8609612,0.34174532,0.29368156,0.0766471,0.9988448,0.79328763,0.2489264,0.6519195,0.9784465,0.4138705,0.042617798,0.4328106,0.09159988,0.38656944,0.09423816,0.37375563,0.7956086,0.5758749,0.4125771,0.6380991,0.21764302,0.68093777,0.007032275,0.071911275,0.57288057,0.95555156,0.017209709,0.75227857,0.1965301,0.8673731,0.93964136,0.8243197,0.23662817,0.18239653,0.40462905,0.35585004,0.7762994,0.54961073,0.5680735,0.40182978,0.7363911,0.12841308,0.79457223,0.73112714,0.35299957,0.75415826,0.5216048,0.9024605,0.096004665,0.6347685,0.0034345984,0.3395378,0.37654334,0.37631512,0.6712333,0.3303933,0.33123744,0.96371293,0.6372886,0.12386632,0.9324205,0.09310794,0.081029356,0.5063291,0.9856861,0.33724236,0.9386581,0.9815364,0.58352757,0.09925157,0.17270559,0.3413447,0.8970178,0.20230532,0.5097363,0.47866648,0.9323511,0.50369084,0.6312686,0.558142,0.94725245,0.7969257,0.50289655,0.5045151,0.5209662,0.86197317,0.5884053,0.40158975,0.97363013,0.18243289,0.76876247,0.10206175,0.62478876,0.11364776,0.6602931,0.74471766,0.72070783,0.15406066,0.88276535,0.152857,0.21574765,0.14408177,0.4878142,0.2668274,0.6996846,0.34549892,0.93303233,0.94290394,0.87151706,0.2965303,0.5296936,0.05714649,0.08755243,0.4025482,0.445612,0.8912187,0.6896793,0.42299128,0.9928673,0.08045477,0.34652412,0.31685245,0.84745926,0.8838488,0.32916176,0.48132175,0.9494287,0.43037558,0.07329041,0.88275117,0.4232636,0.7235126,0.14601946,0.26128882,0.88578844,0.19152671,0.69800866,0.76861626,0.8091213,0.1786542,0.016612768,0.5536713,0.1572234,0.03348881,0.044530153,0.87860584,0.6842138,0.99559236,0.8484529,0.96422565,0.07977855,0.3675521,0.43622053,0.5215901,0.47107047,0.023573577,0.96746814,0.6182742,0.6815247,0.011464417,0.9858333,0.40107387,0.5356564,0.29492378,0.54016733,0.20186847,0.45646495,0.8279077,0.94324577,0.59325933,0.5904417,0.50112426,0.94015604,0.14192736,0.8169206,0.7291905,0.491468,0.48996603,0.7467711,0.8105215,0.50068533,0.2404427,0.32401693,0.7736509,0.17918909,0.14894128,0.9372675,0.38451278,0.40839142,0.7467929,0.19092888,0.8185206,0.25722378,0.61616874,0.23466814,0.26643282,0.5881095,0.6773987,0.99983406,0.33951294,0.54657716,0.5630997,0.93040377,0.54099804,0.30462325,0.17340034,0.05106175,0.57914937,0.10744321,0.016304255,0.104397774,0.7920506,0.86443603,0.8247329,0.2717135,0.14385307,0.90130806,0.047858953,0.8169745,0.9224737,0.23912877,0.18291879,0.1510722,0.5340908,0.84242755,0.041856945,0.984431,0.3425358,0.6515936,0.13509417,0.7414026,0.86235577,0.12030196,0.55574965,0.46174031,0.38155138,0.16741115,0.4182304,0.3652894,0.19053972,0.4413718,0.85479546,0.84901774,0.5326311,0.11586386,0.3152069,0.30444306,0.5012517,0.88600975,0.9137156,0.06279749,0.80142504,0.72855633,0.49333668,0.40994817,0.3068977,0.4059862,0.051723123,0.76882833,0.99714696,0.72833866,0.02114284,0.2702126,0.29584402,0.59793615,0.39541525,0.36001408,0.277799,0.7272057,0.8306277,0.3004197,0.21674466,0.27995932,0.048587203,0.2812857,0.6414012,0.19907236,0.27997184,0.87607104,0.41012073,0.5713327,0.1888467,0.15260911,0.34115958,0.48180085,0.015547454,0.42324907,0.010537863,0.62942076,0.3079787,0.32199317,0.39489365,0.73258305,0.03232324,0.19951612,0.8632354,0.93321776,0.4663298,0.19228071,0.45767266,0.01175642,0.68818474,0.35190648,0.62581897,0.019557416,0.7410535,0.90866476,0.3314966,0.70236087,0.44038963,0.72225654,0.3586359,0.8758795,0.013874769,0.76829046,0.29698765,0.2862174,0.24132162,0.785158,0.14671046,0.7725417,0.8661067,0.01896441,0.2694428,0.09203881,0.855903,0.050106883,0.94162416,0.17801791,0.62696916,0.5509087,0.5052299,0.0070573688,0.8444709,0.23696184,0.86348355,0.5419266,0.5558306,0.35365993,0.21439236,0.30088198,0.59261626,0.5426122,0.66112685,0.153682,0.72981536,0.5096288,0.97146183,0.6487734,0.5634335,0.35679752,0.8929772,0.9886646,0.45528817,0.9264983,0.25885868,0.1612525,0.8978192,0.8563076,0.66145885,0.43915892,0.9250479,0.97255486,0.825895,0.72793436,0.5949073,0.009332538,0.41065115,0.09390581,0.4026333,0.67220813,0.80127656,0.2657053,0.76742244,0.6555194,0.37986076,0.27797127,0.43096393,0.1433711,0.65813345,0.52483886,0.8856777,0.4923343,0.79505336,0.89373285,0.43460876,0.51403636,0.19799167,0.9513718,0.49913895,0.99461395,0.7755914,0.2141378,0.6132968,0.64229673,0.6937305,0.7300384,0.65592337,0.52173287,0.23548311,0.6709875,0.20885313,0.58222425,0.21145439,0.5392873,0.12829512,0.12560046,0.7663569,0.35385525,0.06856418,0.8874349,0.9173395,0.73838305,0.5961656,0.8627402,0.60363096,0.88934594,0.92504793,0.52483,0.86789834,0.6763186,0.14080232,0.7349943,0.2978574,0.6057565,0.96602225,0.38292056,0.3807401,0.56324506,0.75739473,0.7359339,0.63997763,0.40479934,0.07693714,0.102303624,0.5877844,0.8773477,0.10782081,0.8638466,0.7222327,0.55990165,0.6052573,0.23027408,0.18402147,0.5935771,0.40390408,0.37720942,0.75573176,0.73969454,0.61724836,0.5072206,0.7022932,0.61536855,0.13664591,0.014846504,0.41118783,0.9156584,0.3964455,0.4293663,0.8682031,0.66646093,0.3483621,0.3805089,0.0010889769,0.45449263,0.36754882,0.10058057,0.7191452,0.5571519,0.28234977,0.20040268,0.7795807,0.6186276,0.7203128,0.7854021,0.20757532,0.17780328,0.53865516,0.7022319,5.927682E-4,0.90240115,0.7550669,0.50607675,0.95103115,0.7921364,0.31470758,0.93561,0.14525169,0.116770744,0.37482482,0.48832804,0.64003974,0.20383513,0.91603136,0.45623457,0.90637845,0.9020358,0.20850927,0.2537434,0.36993378,0.15219963,0.48494166,0.43000758,0.100877404,0.39589524,0.56564045,0.6810706,0.8237322,0.85607,0.8140767,0.87832326,0.6700822,0.11326796,0.79490703,0.4143867,0.80062133,0.969968,0.18681288,0.48203474,0.3236301,0.7046537,0.6473574,0.5830114,0.05820787,0.34237832,0.41805536,0.0891493,0.18419576,0.15141535,0.9295202,0.91620547,0.81659526,0.87331986,0.6565922,0.8300912,0.9984226,0.12921393,0.072583616,0.9851049,0.55847114,0.45683354,0.05414468,0.5344107,0.09364742,0.72493,0.24083251,0.48500818,0.95177245,0.4637385,0.10644233,0.9641065,0.28052175,0.42775536,0.25586373,0.18304658,0.820131,0.47098684,0.3280965,0.23126721,0.32839262,0.33174235,0.92266834,0.3994326,0.0911836,0.97617227,0.9357414,0.65152764,0.4733104,0.7849484,0.30949348,0.6648952,0.5639627,0.6492258,0.38285637,0.19987518};
        
//        Query query = new Query("*=>[KNN 2 @v $vec]")
//            .addParam("vec", doubleArrayToBytesLittleEndianOrder(v))
//            .setSortBy("__v_score", true)
//            .returnFields("__v_score")
//            .dialect(2);
        
        Double[] v = new Double[1024];
        for (int i = 0; i < v.length; i++) {
            v[i] = v1[i];
        }
        v[0] = v[0]+0.00000535345;
   
        System.out.println(gson.toJson(v));
        
        
        //Query query = new Query("*=>[KNN $K @v $BLOB AS my_vector_score]").addParam("K", 1).addParam("BLOB",doubleArrayToBytesLittleEndianOrder(v))
        Query query = new Query("*=>[KNN $K @v $BLOB AS my_vector_score]").addParam("K", 1).addParam("BLOB",doubleArrayToBytesLittleEndianOrder(v))
                .setSortBy("my_vector_score", false)
                .returnFields("my_vector_score").dialect(2);
        
        Document doc1 = client.ftSearch(index, query).getDocuments().get(0);
        
        System.out.println(doc1.getId());
        System.out.println(doc1.get("my_vector_score"));
        
    }
    
    public static Float[] generateRandomFloatArray(int size) {
        Float[] randomFloatArray = new Float[size];
        Random random = new Random();
        for (int i = 0; i < size; i++) {
            randomFloatArray[i] = random.nextFloat();
        }
        return randomFloatArray;
    }
    
    public static byte[] floatArrayToBytesLittleEndianOrder(Float[] vector) throws IOException {
        ByteArrayOutputStream bas = new ByteArrayOutputStream();
        DataOutputStream dos = new DataOutputStream(bas);
        for (Float f : vector) {
            byte[] bytes = getBytesLittleEndianOrder(f);
            dos.write(bytes);
        }
        return bas.toByteArray();
    }

    private static byte[] getBytesLittleEndianOrder(Float f) {
        long intBits =  Double.doubleToLongBits(f);
        return new byte[]{(byte) (intBits), (byte) (intBits >> 8), (byte) (intBits >> 16), (byte) (intBits >> 24)};
    }
    
    
    
    
    //---------------------
    
    public static Double[] generateRandomDoubleArray(int size) {
        Double[] randomDoubleArray = new Double[size];
        Random random = new Random();
        for (int i = 0; i < size; i++) {
            randomDoubleArray[i] = random.nextDouble();
        }
        return randomDoubleArray;
    }
    
    public static byte[] doubleArrayToBytesLittleEndianOrder(Double[] vector) throws IOException {
        ByteArrayOutputStream bas = new ByteArrayOutputStream();
        DataOutputStream dos = new DataOutputStream(bas);
        for (Double f : vector) {
            byte[] bytes = getBytesLittleEndianOrder(f);
            dos.write(bytes);
        }
        return bas.toByteArray();
    }

//    private static byte[] getBytesLittleEndianOrder(Double f) {
//        long intBits =  Double.doubleToLongBits(f);
//        return new byte[]{(byte) (intBits), (byte) (intBits >> 8), (byte) (intBits >> 16), (byte) (intBits >> 24)};
//    }
    
    public static byte[] getBytesLittleEndianOrder(Double value) {
        byte[] bytes = new byte[8];
        long lng = Double.doubleToLongBits(value);
        for (int i = 0; i < 8; i++) {
            bytes[i] = (byte) (lng >>> (i * 8));
        }
        return bytes;
    }
    
}